import { Component, OnInit } from '@angular/core';
import { CommunicationService } from '../../../services/communication.service';
import { UserService } from '../../../services/user.service';
import { AuthService } from '../../../services/auth.service';
import { BlockService } from '../../../services/block.service';
import { User } from '../../../models/user.model';
import { Message } from '../../../models/communication.model';

@Component({
  selector: 'app-chat',
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.css']
})
export class ChatComponent implements OnInit {
  users: User[] = [];
  messages: Message[] = [];
  selectedUserId!: number;
  selectedUserName: string = '';
  newMessage: string = '';
  userId!: number;

  constructor(
    private communicationService: CommunicationService,
    private userService: UserService,
    private authService: AuthService,
    private blockService: BlockService
  ) { }

  ngOnInit(): void {
    this.authService.getCurrentUser().subscribe((user: User) => {
      this.userId = user.id;
      this.loadUsers();
    });
  }

  loadUsers(): void {
    this.userService.getAllUsers().subscribe(users => {
      this.users = users.filter(user => user.id !== this.userId);
    }, error => {
      console.error('Error loading users', error);
    });
  }

  selectUser(user: User): void {
    this.selectedUserId = user.id;
    this.selectedUserName = user.name;
    this.loadMessages();
  }

  loadMessages(): void {
    this.communicationService.getMessagesBetweenUsers(this.userId, this.selectedUserId).subscribe(messages => {
      this.messages = messages;
    }, error => {
      console.error('Error loading messages', error);
    });
  }

  sendMessage(): void {
    if (this.newMessage.trim()) {
      const message: Message = {
        id: 0, // ID will be auto-generated by the server
        senderId: this.userId,
        receiverId: this.selectedUserId,
        content: this.newMessage,
        timestamp: new Date().toISOString()
      };
      this.communicationService.sendMessage(message.senderId, message.receiverId, message.content).subscribe(sentMessage => {
        this.messages.push(sentMessage);
        this.newMessage = '';
      }, error => {
        console.error('Error sending message', error);
      });
    }
  }

  blockUser(userId: number): void {
    this.blockService.blockUser(this.userId, userId).subscribe(() => {
      this.loadUsers();
    }, error => {
      console.error('Error blocking user', error);
    });
  }
}
